/*
If an attacker can control the schema file, it could run arbitrary JavaScript code on the victim machine.
This is demonstrated by the following POC:
const djv = require('djv');
const env = new djv();
const evilSchema = JSON.parse('{"common":{"type":"array", "minItems":"process.mainModule.require(`child_process`).execSync(`touch HACKED`)"}}')
env.addSchema('test', evilSchema);
env.validate('test#/common', { type: 'custom' });
*/
const assert = require('assert');
const djv = require('../../');

describe('Code execution injection', () => {
  it('should be avoided', () => {
    const env = new djv();
    const evilSchema = JSON.parse('{"common":{"type":"array", "minItems":"process.mainModule.require(`child_process`).execSync(`touch HACKED`)"}}')
    env.addSchema('test', evilSchema);
    assert.throws(() => env.validate('test#/common', { type: 'custom' }))
  });
});
